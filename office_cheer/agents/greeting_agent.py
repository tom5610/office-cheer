# ABOUTME: Greeting agent implementation using Strands Agents SDK
# ABOUTME: Generates personalized greeting content for birthdays and work anniversaries

import logging
import json
from typing import List, Dict, Any, Optional

from strands import Agent, BedrockModel, tool

from office_cheer.db.models import Staff

logger = logging.getLogger(__name__)

# Tool implementations for the agent to use

@tool
def get_staff_info(staff_id: int) -> Dict[str, Any]:
    """
    Retrieve information about a staff member by ID.
    
    Args:
        staff_id: The unique ID of the staff member
        
    Returns:
        Dictionary with staff information
    """
    from office_cheer.db import db_utils
    
    staff = db_utils.get_staff_by_id(staff_id)
    if not staff:
        return {"error": f"Staff member with ID {staff_id} not found"}
    
    return {
        "id": staff.id,
        "name": staff.name,
        "alias": staff.alias,
        "email": staff.email_address,
        "interests": staff.get_interests_list(),
        "years_of_service": _calculate_years_of_service(staff)
    }


@tool
def get_upcoming_events(days_ahead: int = 7) -> Dict[str, List]:
    """
    Get upcoming birthdays and work anniversaries within the specified days.
    
    Args:
        days_ahead: Number of days to look ahead (default: 7)
        
    Returns:
        Dictionary with lists of upcoming events
    """
    from office_cheer.services.date_service import DateMonitoringService
    from office_cheer.config import Config
    
    date_service = DateMonitoringService(Config())
    
    birthdays = date_service.get_upcoming_birthdays(days_ahead)
    anniversaries = date_service.get_upcoming_anniversaries(days_ahead)
    
    # Format birthdays for output
    birthday_list = []
    for staff in birthdays:
        birthday_list.append({
            "id": staff.id,
            "name": staff.name,
            "days_until": date_service.days_to_next_birthday(staff)
        })
    
    # Format anniversaries for output
    anniversary_list = []
    for staff, years in anniversaries:
        anniversary_list.append({
            "id": staff.id,
            "name": staff.name,
            "years": years,
            "days_until": date_service.days_to_next_anniversary(staff)
        })
    
    return {
        "birthdays": birthday_list,
        "anniversaries": anniversary_list
    }


@tool
def generate_greeting_content(staff_name: str, event_type: str, 
                             interests: List[str], years: Optional[int] = None) -> str:
    """
    Generate personalized greeting text based on staff information.
    This is a stub implementation that will be handled by the agent itself.
    
    Args:
        staff_name: Name of the staff member
        event_type: Type of event ("birthday" or "anniversary")
        interests: List of the staff member's interests
        years: Years of service (for anniversaries only)
        
    Returns:
        Personalized greeting text
    """
    interests_str = ", ".join(interests) if interests else "unknown interests"
    
    if event_type.lower() == "birthday":
        return f"Happy Birthday, {staff_name}! We know you enjoy {interests_str}, " \
               f"so we hope you have a chance to enjoy those today!"
    
    elif event_type.lower() == "anniversary":
        if not years:
            years = "many"
        return f"Congratulations on your {years}-year work anniversary, {staff_name}! " \
               f"We appreciate your {years} years of dedicated service. " \
               f"We know you enjoy {interests_str}, which makes our workplace better!"
    
    return "Congratulations on your special day!"


@tool
def format_email_body(greeting_content: str, image_url: Optional[str] = None) -> str:
    """
    Format the content for an email body.
    
    Args:
        greeting_content: The personalized greeting message
        image_url: URL to the generated image (optional)
        
    Returns:
        Formatted email body in HTML
    """
    html = f"""
    <html>
    <body>
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="text-align: center; padding: 20px 0;">
                <p style="font-size: 18px; line-height: 1.5;">{greeting_content}</p>
            </div>
    """
    
    if image_url:
        html += f"""
            <div style="text-align: center; padding: 20px 0;">
                <img src="{image_url}" alt="Celebration Image" style="max-width: 100%; border-radius: 8px;">
            </div>
        """
    
    html += """
            <div style="text-align: center; padding: 20px 0; color: #666;">
                <p>This message was generated by the Office Cheer system.</p>
            </div>
        </div>
    </body>
    </html>
    """
    
    return html


def _calculate_years_of_service(staff: Staff) -> int:
    """
    Calculate years of service for a staff member.
    
    Args:
        staff: Staff member object
        
    Returns:
        Number of years of service
    """
    from office_cheer.utils import date_utils
    return date_utils.years_between(staff.start_date)


class GreetingAgent:
    """
    Wrapper class for the Strands Agent to generate personalized greetings.
    Provides a simplified interface for the application to use.
    """
    
    def __init__(self, agent):
        """
        Initialize the greeting agent.
        
        Args:
            agent: Initialized Strands Agent instance
        """
        self.agent = agent
        logger.info("Greeting agent initialized")
    
    def generate_birthday_greeting(self, staff: Staff) -> str:
        """
        Generate a personalized birthday greeting for a staff member.
        
        Args:
            staff: Staff member object
            
        Returns:
            Personalized greeting text
        """
        logger.info(f"Generating birthday greeting for {staff.name}")
        
        try:
            # Prepare the prompt for the agent
            prompt = self._create_birthday_prompt(staff)
            
            # Generate content using the agent
            response = self.agent(prompt)
            
            logger.info(f"Successfully generated birthday greeting for {staff.name}")
            return response
        except Exception as e:
            logger.error(f"Error generating birthday greeting: {e}")
            
            # Fallback to a simpler greeting
            from office_cheer.services.date_service import DateMonitoringService
            from office_cheer.config import Config
            
            date_service = DateMonitoringService(Config())
            return date_service.format_birthday_message(staff)
    
    def generate_anniversary_greeting(self, staff: Staff, years: int) -> str:
        """
        Generate a personalized work anniversary greeting for a staff member.
        
        Args:
            staff: Staff member object
            years: Years of service
            
        Returns:
            Personalized greeting text
        """
        logger.info(f"Generating {years}-year anniversary greeting for {staff.name}")
        
        try:
            # Prepare the prompt for the agent
            prompt = self._create_anniversary_prompt(staff, years)
            
            # Generate content using the agent
            response = self.agent(prompt)
            
            logger.info(f"Successfully generated anniversary greeting for {staff.name}")
            return response
        except Exception as e:
            logger.error(f"Error generating anniversary greeting: {e}")
            
            # Fallback to a simpler greeting
            from office_cheer.services.date_service import DateMonitoringService
            from office_cheer.config import Config
            
            date_service = DateMonitoringService(Config())
            return date_service.format_anniversary_message(staff, years)
    
    def _create_birthday_prompt(self, staff: Staff) -> str:
        """
        Create a prompt for generating a birthday greeting.
        
        Args:
            staff: Staff member object
            
        Returns:
            Prompt string for the agent
        """
        display_name = staff.get_display_name()
        interests = staff.get_interests_list()
        interests_text = ", ".join(interests) if interests else "no specified interests"
        
        prompt = f"""
        Generate a warm, personalized birthday greeting for a colleague named {display_name}.
        
        Details about {display_name}:
        - Full name: {staff.name}
        - Interests: {interests_text}
        
        The greeting should be:
        - Friendly and professional
        - Around 3-4 sentences
        - Specifically mention their interests in a thoughtful way
        - Suitable for a workplace email
        - End with a warm wish for their birthday
        
        Do not include any formatting like HTML or markdown. Just provide the plain text greeting.
        """
        
        return prompt
    
    def _create_anniversary_prompt(self, staff: Staff, years: int) -> str:
        """
        Create a prompt for generating a work anniversary greeting.
        
        Args:
            staff: Staff member object
            years: Years of service
            
        Returns:
            Prompt string for the agent
        """
        display_name = staff.get_display_name()
        interests = staff.get_interests_list()
        interests_text = ", ".join(interests) if interests else "no specified interests"
        
        # Adjust messaging based on milestone years
        if years == 1:
            milestone = "first year"
            significance = "starting their journey"
        elif years == 5:
            milestone = "five years"
            significance = "becoming an established team member"
        elif years == 10:
            milestone = "decade"
            significance = "showing exceptional dedication"
        elif years == 15:
            milestone = "fifteen years"
            significance = "demonstrating extraordinary commitment"
        elif years == 20:
            milestone = "twenty years"
            significance = "achieving a remarkable milestone"
        else:
            milestone = f"{years} years"
            significance = "showing continued dedication"
        
        prompt = f"""
        Generate a congratulatory work anniversary message for a colleague named {display_name} 
        who has completed {years} year(s) with the company.
        
        Details about {display_name}:
        - Full name: {staff.name}
        - Years of service: {years}
        - This is a {milestone} milestone, {significance}
        - Interests: {interests_text}
        
        The greeting should be:
        - Professional and appreciative
        - Acknowledge their specific years of service
        - Reference the significance of this milestone
        - Mention how their interests contribute to the workplace culture
        - Around 4-5 sentences
        - End with appreciation and congratulations
        
        Do not include any formatting like HTML or markdown. Just provide the plain text greeting.
        """
        
        return prompt


def create_greeting_agent(config):
    """
    Factory function to create and configure a greeting agent.
    
    Args:
        config (Config): Application configuration
        
    Returns:
        GreetingAgent: Configured greeting agent
    """
    try:
        # Configure the Bedrock model
        bedrock_model = BedrockModel(
            model_id=config.bedrock_model_id,
            region=config.aws_region,
            access_key_id=config.aws_access_key_id,
            secret_access_key=config.aws_secret_access_key
        )
        
        # Create the Strands Agent with tools
        agent = Agent(
            model=bedrock_model,
            tools=[
                get_staff_info,
                get_upcoming_events,
                generate_greeting_content,
                format_email_body
            ]
        )
        
        # Create and return the wrapper
        return GreetingAgent(agent)
    except Exception as e:
        logger.error(f"Error creating greeting agent: {e}")
        raise


# Example usage
if __name__ == "__main__":
    # This is just for testing the agent directly
    import sys
    from datetime import date
    from office_cheer.config import Config
    from office_cheer.db.models import Staff
    
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    
    # Create a test staff member
    test_staff = Staff(
        name="Test User",
        email_address="test@example.com",
        birthday=date(1990, 1, 15),
        start_date=date(2015, 3, 10),
        alias="Tester",
        interests="programming, hiking, music"
    )
    
    try:
        # Create the agent
        config = Config()
        agent = create_greeting_agent(config)
        
        # Generate greetings
        birthday_greeting = agent.generate_birthday_greeting(test_staff)
        print(f"Birthday Greeting: {birthday_greeting}\n")
        
        anniversary_greeting = agent.generate_anniversary_greeting(test_staff, 5)
        print(f"Anniversary Greeting: {anniversary_greeting}")
    except Exception as e:
        print(f"Error in test: {e}")